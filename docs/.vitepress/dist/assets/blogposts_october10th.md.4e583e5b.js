import{_ as e,c as a,o as t,a as n}from"./app.0119e290.js";const y=JSON.parse(`{"title":"Understanding OpenXML SDK","description":"","frontmatter":{},"headers":[{"level":2,"title":"What's XML?","slug":"what-s-xml","link":"#what-s-xml","children":[]},{"level":2,"title":"OpenXML SDK","slug":"openxml-sdk","link":"#openxml-sdk","children":[{"level":3,"title":"Manipulation of the structure","slug":"manipulation-of-the-structure","link":"#manipulation-of-the-structure","children":[]},{"level":3,"title":"Manipulation of the attributes","slug":"manipulation-of-the-attributes","link":"#manipulation-of-the-attributes","children":[]}]},{"level":2,"title":"My feature task","slug":"my-feature-task","link":"#my-feature-task","children":[]}],"relativePath":"blogposts/october10th.md"}`),s={name:"blogposts/october10th.md"},o=n(`<h1 id="understanding-openxml-sdk" tabindex="-1">Understanding OpenXML SDK <a class="header-anchor" href="#understanding-openxml-sdk" aria-hidden="true">#</a></h1><p>My feature is about an SDK that will help to translate a .md file to the popular .docx format. This has been mostly achieved with the help of the popular package &quot;Markdig&quot; which helps to translate markdown to html and the &quot;HtmlToDocx&quot; package that is in charge of translate the new html file to the final result in docx format. Now, sounds like everything is done, but the complex part here is return to .md format from a .docx file, and that&#39;s what I&#39;m working on and why I needed to learn the use of the OpenXML SDK.</p><h2 id="what-s-xml" tabindex="-1">What&#39;s XML? <a class="header-anchor" href="#what-s-xml" aria-hidden="true">#</a></h2><p>Likely Html, XML is a markup language that will help us to store and transport data in a readable way</p><p>We can see it works in a tree structure, this is really important to understand and code it then. There are elements that contains elements</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">&lt;root&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;child&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;subchild&gt;.....&lt;/subchild&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;/child&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;/root&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>And there are other elements that contains text, like title or author</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">&lt;book category=&quot;children&quot;&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;title&gt;Learning XML&lt;/title&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;author&gt;Fabian Valverde&lt;/author&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;/book&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>We can also see that those elements can contains attributes that will be probably used by the text editor to give the desired format to the document, so in that case you&#39;ll find properties used for MSWord to give color to a table border as you can see in the following example</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">&lt; w:tblBorders &gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt; w:left w:val = &quot;single&quot; w: sz = &quot;4&quot; w: space = &quot;0&quot; w: color = &quot;000000&quot; w: themeColor = &quot;text1&quot; /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt; w:right w:val = &quot;single&quot; w: sz = &quot;4&quot; w: space = &quot;0&quot; w: color = &quot;000000&quot; w: themeColor = &quot;text1&quot; /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;/ w:tblBorders &gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="openxml-sdk" tabindex="-1">OpenXML SDK <a class="header-anchor" href="#openxml-sdk" aria-hidden="true">#</a></h2><p>OpenXML is a set of methods that wants to simplify the manipulation of documents in format .docx. Briefly, we can open documents to edit them, create new document and format them or delete documents, everything having completely control of the XML Structure.</p><h3 id="manipulation-of-the-structure" tabindex="-1">Manipulation of the structure <a class="header-anchor" href="#manipulation-of-the-structure" aria-hidden="true">#</a></h3><p>The way to edit a new document is creating the basic XML structure using the classes provided by the SDK as Document, Body, Paragraph, Run and Text. As was mentioned, XML works as a tree structure, so what we need to understand is we need to append the child tag to the parent tag using the append method</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">&lt;parent&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">   &lt;child&gt;\u2026&lt;/child&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;/parent&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Seeing the previous structure we can say that the way to construct it is doing the following: <em>parent.AppendChild(\u201Cchild\u201D);</em></p><h3 id="manipulation-of-the-attributes" tabindex="-1">Manipulation of the attributes <a class="header-anchor" href="#manipulation-of-the-attributes" aria-hidden="true">#</a></h3><p>For this, we only need to understand that we\u2019re not exactly creating an XML document to our own editor, what we\u2019re doing with this SDK is create or open an existing .docx document, providing the necessary tools that the docx editor needs to understand it, so every attribute in every tag is predefined and we only need to understand why the editor application need it and how it works. To manipulate an attribute is as easy to see them as what they are, variables. Following we can see the XML structure</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">&lt; w:tblBorders &gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt; w:left w:val = &quot;single&quot; w: sz = &quot;4&quot; w: space = &quot;0&quot; w: color = &quot;000000&quot; w: themeColor = &quot;text1&quot; /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;/ w:tblBorders &gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Now we\u2019ll see the code to build the previous XML</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">var tblBorder = new TableBorders();</span></span>
<span class="line"><span style="color:#A6ACCD;">var leftBorder = new LeftBorder();</span></span>
<span class="line"><span style="color:#A6ACCD;">leftBorder.Val = new EnumValue&lt;BorderValues&gt;(BorderValues.Thick);</span></span>
<span class="line"><span style="color:#A6ACCD;">leftBorder.Size = 8;</span></span>
<span class="line"><span style="color:#A6ACCD;">leftBorder.Color = borderColor;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>As you can see, everything we are doing is to create a new LeftBorder class, giving to his variables a new value, and then, seeing the structure we could know that LeftBorder in the Child of TableBorder, so everything we need is to append the LeftBorder class to the TableBorders class as following: <em>tblBorder.AppendChild(leftBorder);</em></p><h2 id="my-feature-task" tabindex="-1">My feature task <a class="header-anchor" href="#my-feature-task" aria-hidden="true">#</a></h2><p>For my feature task what I\u2019m doing is translating an .md document to .docx and vice versa, using an SDK named Markdig to translate markdown to html, and then, other SDK to translate html to .docx format named HtmlToDocx. There are just 2 issues by the moment:</p><ul><li>Tables aren\u2019t being displayed well. I can set a size for those tables but can\u2019t size them automatically depending on the text inside them.</li><li>I can\u2019t read new lines in many parts of the document, for example lists, and what happens is when I\u2019m translating from .docx, every list line in .md will be separated by an space, and it\u2019s because of the way the SDK read the document, something a little bit complex and extend to explain.</li></ul><p>I\u2019ve been working my feature using all the previous knowledge in order to understand behaviors that doesn\u2019t make sense, and fix them while I need to translate .md to docx, or understand that I need to look for specific variables and where can I find them while I\u2019m looping the document in order to reconstruct the .md file, and based on my experience what could I recommend you if you need to work with this SDK? Well, the best you can do is work on understand deeply what you\u2019re doing and learn how to read the documentation, something that could be the most important thing to move forward in your code.</p><p>I\u2019ll give you here a briefly tour around the SDK documentation:</p><h4 id="here-you-can-find-a-summary-about-what-the-class-does-and-where-it-should-be-placed-you-can-check-which-should-be-the-parent-and-possible-childs" tabindex="-1">Here you can find a summary about what the class does and where it should be placed, you can check which should be the parent and possible childs. <a class="header-anchor" href="#here-you-can-find-a-summary-about-what-the-class-does-and-where-it-should-be-placed-you-can-check-which-should-be-the-parent-and-possible-childs" aria-hidden="true">#</a></h4><p>image</p><h4 id="here-you-can-find-constructors-to-know-what-you-can-declare-when-you\u2019re-creating-a-new-instance" tabindex="-1">Here you can find constructors, to know what you can declare when you\u2019re creating a new instance. <a class="header-anchor" href="#here-you-can-find-constructors-to-know-what-you-can-declare-when-you\u2019re-creating-a-new-instance" aria-hidden="true">#</a></h4><p>image</p><h4 id="here-you-can-find-properties-what-we-call-variables-of-the-class" tabindex="-1">Here you can find properties, what we call variables of the class. <a class="header-anchor" href="#here-you-can-find-properties-what-we-call-variables-of-the-class" aria-hidden="true">#</a></h4><p>image</p><h4 id="here-you-can-find-every-method-you-can-use-the-most-usual-is-the-append-method" tabindex="-1">Here you can find every method you can use, the most usual is the Append() method. <a class="header-anchor" href="#here-you-can-find-every-method-you-can-use-the-most-usual-is-the-append-method" aria-hidden="true">#</a></h4><p>iamge</p><h4 id="also-you-can-see-lot-of-examples-an-good-tutorials-here-in-order-to-start-your-learning-path-of-this-sdk" tabindex="-1">Also, you can see lot of examples an good tutorials here in order to start your learning path of this SDK! <a class="header-anchor" href="#also-you-can-see-lot-of-examples-an-good-tutorials-here-in-order-to-start-your-learning-path-of-this-sdk" aria-hidden="true">#</a></h4><p>image</p><p>##Last recommendations Already mentioned all that, my last advice is learn reading the way word creates their documents opening those files in XML format. Doing that is quite simple, we can use the following commands to decompress the .docx file and see what&#39;s inside it</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">cd path/to/your/file.docx</span></span>
<span class="line"><span style="color:#A6ACCD;">unzip file.docx -d file-content</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>And it should look like this</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">fabianvalverde@Fabians-MacBook-Pro ~ % cd Documents/StudyOpenXml/</span></span>
<span class="line"><span style="color:#A6ACCD;">fabianvalverde@Fabians-MacBook-Pro StudyOpenXml % unzip SampleFile.docx -d file-content</span></span>
<span class="line"><span style="color:#A6ACCD;">Archive:  SampleFile.docx</span></span>
<span class="line"><span style="color:#A6ACCD;">  inflating: file-content/word/document.xml  </span></span>
<span class="line"><span style="color:#A6ACCD;"> extracting: file-content/_rels/.rels  </span></span>
<span class="line"><span style="color:#A6ACCD;"> extracting: file-content/[Content_Types].xml </span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h4 id="then-it-s-just-as-simple-as-drag-and-drop-the-xml-file-to-your-favorite-browser" tabindex="-1">Then it&#39;s just as simple as drag and drop the XML file to your favorite browser! <a class="header-anchor" href="#then-it-s-just-as-simple-as-drag-and-drop-the-xml-file-to-your-favorite-browser" aria-hidden="true">#</a></h4><p>image</p><h4 id="if-your-xml-file-need-permissions-you-have-to-open-the-get-info-window-and-change-the-permissions-of-the-file" tabindex="-1">If your XML file need permissions you have to open the Get Info window and change the permissions of the file <a class="header-anchor" href="#if-your-xml-file-need-permissions-you-have-to-open-the-get-info-window-and-change-the-permissions-of-the-file" aria-hidden="true">#</a></h4><p>image</p><p>Then you&#39;re completely ready to read the file and learn or try new ways to work with your documents!</p>`,46),l=[o];function r(i,d,p,c,h,u){return t(),a("div",null,l)}const f=e(s,[["render",r]]);export{y as __pageData,f as default};
